import os
import platform
import tkinter as tk
from tkinter import messagebox, filedialog, ttk, PhotoImage

def browse_folder():
    folder = filedialog.askdirectory()
    if folder:
        output_dir.set(folder)

def update_preview(*args):
    base = base_name.get().strip()
    ext = extension.get().strip().lstrip('.')
    try:
        cnt = int(file_count.get())
    except ValueError:
        cnt = 0
    if base and ext and cnt > 0:
        example = f"{base}1.{ext} to {base}{cnt}.{ext}"
        preview_label.config(text=f"Example: {example}", fg="gray")
    else:
        preview_label.config(text="")

def create_files():
    base = base_name.get().strip()
    ext = extension.get().strip().lstrip('.')
    try:
        cnt = int(file_count.get())
        if not base or not ext or cnt <= 0:
            raise ValueError
    except ValueError:
        status_label.config(text="Please enter valid inputs!", fg="red")
        return

    out_folder = output_dir.get() or os.getcwd()

    try:
        os.makedirs(out_folder, exist_ok=True)
        for i in range(1, cnt + 1):
            filename = os.path.join(out_folder, f"{base}{i}.{ext}")
            with open(filename, 'w') as f:
                f.write(f"// {os.path.basename(filename)} generated by script\n")
        status_label.config(text=f"{cnt} file(s) created successfully in '{out_folder}'", fg="green")
    except Exception as e:
        status_label.config(text=f"Error: {str(e)}", fg="red")

def clear_fields():
    base_name.set("")
    extension.set("")
    file_count.set("")
    output_dir.set("")
    preview_label.config(text="")
    status_label.config(text="")

def exit_app():
    root.destroy()

root = tk.Tk()
root.title("Multi File Generator")
root.geometry("480x470")
root.resizable(False, False)
root.configure(bg="#f8f9fa")

try:
    if platform.system() == "Windows":
        root.iconbitmap("app_icon.ico") 
    else:
        icon_img = PhotoImage(file="app_icon.png") 
except Exception as e:
    print(f"Icon not set: {e}")

base_name = tk.StringVar()
extension = tk.StringVar()
file_count = tk.StringVar()
output_dir = tk.StringVar()

for var in (base_name, extension, file_count):
    var.trace_add('write', update_preview)

tk.Label(
    root,
    text="🛠 Multi File Generator Tool",
    font=("Helvetica", 16, "bold"),
    bg="#f8f9fa",
    fg="#343a40"
).pack(pady=10)

frame = tk.Frame(root, padx=20, pady=10, bg="#f8f9fa")
frame.pack()

def add_labeled_entry(row, label, var, width=30, hint=""):
    tk.Label(frame, text=label, bg="#f8f9fa", anchor="w").grid(row=row, column=0, sticky="w")
    entry = tk.Entry(frame, textvariable=var, width=width)
    entry.grid(row=row, column=1, padx=10)
    if hint:
        hint_label = tk.Label(frame, text=hint, font=("Arial", 8), fg="gray", bg="#f8f9fa")
        hint_label.grid(row=row+1, column=1, sticky="w", padx=10)

add_labeled_entry(0, "Base File Name:", base_name, hint="e.g., q")
add_labeled_entry(2, "File Extension:", extension, hint="e.g., dart, txt, py")
add_labeled_entry(4, "Number of Files:", file_count, hint="e.g., 100")

tk.Label(frame, text="Output Directory:", bg="#f8f9fa", anchor='w').grid(row=6, column=0, sticky="w")
tk.Entry(frame, textvariable=output_dir, width=24).grid(row=6, column=1, sticky="w", padx=10)
tk.Button(frame, text="📁 Browse", command=browse_folder).grid(row=6, column=1, sticky="e")

preview_label = tk.Label(root, text="", font=("Arial", 10, "italic"), bg="#f8f9fa", fg="gray")
preview_label.pack(pady=5)

btn_frame = tk.Frame(root, bg="#f8f9fa")
btn_frame.pack(pady=10)

style = ttk.Style()
style.configure("TButton", padding=6, font=('Arial', 10))

ttk.Button(btn_frame, text="Create Files", command=create_files).grid(row=0, column=0, padx=10)
ttk.Button(btn_frame, text="Clear", command=clear_fields).grid(row=0, column=1, padx=10)
ttk.Button(btn_frame, text="Exit", command=exit_app).grid(row=0, column=2, padx=10)

status_label = tk.Label(root, text="", font=('Arial', 10), bg="#f8f9fa")
status_label.pack(pady=5)

footer = tk.Label(
    root,
    text="Made by Jalal Khan",
    font=("Arial", 9, "italic"),
    bg="#f8f9fa",
    fg="#6c757d"
)
footer.pack(pady=5)

root.mainloop()

